// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: asset/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgBuyAsset repesents a message to buy asset using uusd
type MsgBuyAsset struct {
	Buyer  string `protobuf:"bytes,1,opt,name=buyer,proto3" json:"buyer,omitempty"`
	Denom  string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Amount uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *MsgBuyAsset) Reset()         { *m = MsgBuyAsset{} }
func (m *MsgBuyAsset) String() string { return proto.CompactTextString(m) }
func (*MsgBuyAsset) ProtoMessage()    {}
func (*MsgBuyAsset) Descriptor() ([]byte, []int) {
	return fileDescriptor_d916a3b302eb5de7, []int{0}
}
func (m *MsgBuyAsset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBuyAsset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBuyAsset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBuyAsset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBuyAsset.Merge(m, src)
}
func (m *MsgBuyAsset) XXX_Size() int {
	return m.Size()
}
func (m *MsgBuyAsset) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBuyAsset.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBuyAsset proto.InternalMessageInfo

// MsgBuyAssetResponse defines Msg/BuyAsset response type.
type MsgBuyAssetResponse struct {
}

func (m *MsgBuyAssetResponse) Reset()         { *m = MsgBuyAssetResponse{} }
func (m *MsgBuyAssetResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBuyAssetResponse) ProtoMessage()    {}
func (*MsgBuyAssetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d916a3b302eb5de7, []int{1}
}
func (m *MsgBuyAssetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBuyAssetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBuyAssetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBuyAssetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBuyAssetResponse.Merge(m, src)
}
func (m *MsgBuyAssetResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBuyAssetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBuyAssetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBuyAssetResponse proto.InternalMessageInfo

// MsgSellAsset represents a message to sell asset to uusd
type MsgSellAsset struct {
	Seller string `protobuf:"bytes,1,opt,name=seller,proto3" json:"seller,omitempty"`
	Denom  string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Amount uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *MsgSellAsset) Reset()         { *m = MsgSellAsset{} }
func (m *MsgSellAsset) String() string { return proto.CompactTextString(m) }
func (*MsgSellAsset) ProtoMessage()    {}
func (*MsgSellAsset) Descriptor() ([]byte, []int) {
	return fileDescriptor_d916a3b302eb5de7, []int{2}
}
func (m *MsgSellAsset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSellAsset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSellAsset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSellAsset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSellAsset.Merge(m, src)
}
func (m *MsgSellAsset) XXX_Size() int {
	return m.Size()
}
func (m *MsgSellAsset) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSellAsset.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSellAsset proto.InternalMessageInfo

// MsgSellAssetResponse defines Msg/SellAsset response type.
type MsgSellAssetResponse struct {
}

func (m *MsgSellAssetResponse) Reset()         { *m = MsgSellAssetResponse{} }
func (m *MsgSellAssetResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSellAssetResponse) ProtoMessage()    {}
func (*MsgSellAssetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d916a3b302eb5de7, []int{3}
}
func (m *MsgSellAssetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSellAssetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSellAssetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSellAssetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSellAssetResponse.Merge(m, src)
}
func (m *MsgSellAssetResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSellAssetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSellAssetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSellAssetResponse proto.InternalMessageInfo

// MsgSetPrice represents a message to set asset price
type MsgSetPrice struct {
	Addr  string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Denom string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Price uint64 `protobuf:"varint,3,opt,name=price,proto3" json:"price,omitempty"`
}

func (m *MsgSetPrice) Reset()         { *m = MsgSetPrice{} }
func (m *MsgSetPrice) String() string { return proto.CompactTextString(m) }
func (*MsgSetPrice) ProtoMessage()    {}
func (*MsgSetPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_d916a3b302eb5de7, []int{4}
}
func (m *MsgSetPrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetPrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetPrice.Merge(m, src)
}
func (m *MsgSetPrice) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetPrice.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetPrice proto.InternalMessageInfo

func (m *MsgSetPrice) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *MsgSetPrice) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgSetPrice) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

// MsgSetPriceResponse defines Msg/SetPrice response type.
type MsgSetPriceResponse struct {
}

func (m *MsgSetPriceResponse) Reset()         { *m = MsgSetPriceResponse{} }
func (m *MsgSetPriceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetPriceResponse) ProtoMessage()    {}
func (*MsgSetPriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d916a3b302eb5de7, []int{5}
}
func (m *MsgSetPriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetPriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetPriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetPriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetPriceResponse.Merge(m, src)
}
func (m *MsgSetPriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetPriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetPriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetPriceResponse proto.InternalMessageInfo

// MsgAddSupply represents a message to add asset supply
type MsgAddSupply struct {
	Addr   string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Denom  string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Amount uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *MsgAddSupply) Reset()         { *m = MsgAddSupply{} }
func (m *MsgAddSupply) String() string { return proto.CompactTextString(m) }
func (*MsgAddSupply) ProtoMessage()    {}
func (*MsgAddSupply) Descriptor() ([]byte, []int) {
	return fileDescriptor_d916a3b302eb5de7, []int{6}
}
func (m *MsgAddSupply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddSupply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddSupply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddSupply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddSupply.Merge(m, src)
}
func (m *MsgAddSupply) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddSupply) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddSupply.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddSupply proto.InternalMessageInfo

func (m *MsgAddSupply) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *MsgAddSupply) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgAddSupply) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

// MsgAddSupplyResopnse defines Msg/AddSupply response type.
type MsgAddSupplyResponse struct {
}

func (m *MsgAddSupplyResponse) Reset()         { *m = MsgAddSupplyResponse{} }
func (m *MsgAddSupplyResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddSupplyResponse) ProtoMessage()    {}
func (*MsgAddSupplyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d916a3b302eb5de7, []int{7}
}
func (m *MsgAddSupplyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddSupplyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddSupplyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddSupplyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddSupplyResponse.Merge(m, src)
}
func (m *MsgAddSupplyResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddSupplyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddSupplyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddSupplyResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgBuyAsset)(nil), "songwongtp.asset.asset.MsgBuyAsset")
	proto.RegisterType((*MsgBuyAssetResponse)(nil), "songwongtp.asset.asset.MsgBuyAssetResponse")
	proto.RegisterType((*MsgSellAsset)(nil), "songwongtp.asset.asset.MsgSellAsset")
	proto.RegisterType((*MsgSellAssetResponse)(nil), "songwongtp.asset.asset.MsgSellAssetResponse")
	proto.RegisterType((*MsgSetPrice)(nil), "songwongtp.asset.asset.MsgSetPrice")
	proto.RegisterType((*MsgSetPriceResponse)(nil), "songwongtp.asset.asset.MsgSetPriceResponse")
	proto.RegisterType((*MsgAddSupply)(nil), "songwongtp.asset.asset.MsgAddSupply")
	proto.RegisterType((*MsgAddSupplyResponse)(nil), "songwongtp.asset.asset.MsgAddSupplyResponse")
}

func init() { proto.RegisterFile("asset/tx.proto", fileDescriptor_d916a3b302eb5de7) }

var fileDescriptor_d916a3b302eb5de7 = []byte{
	// 408 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0x3f, 0x6f, 0xda, 0x40,
	0x18, 0xc6, 0xed, 0xf2, 0x47, 0x70, 0x6d, 0x19, 0xae, 0xae, 0x85, 0x18, 0x0c, 0x82, 0x0e, 0x48,
	0x6d, 0x6d, 0xa9, 0xdd, 0xba, 0xc1, 0xd6, 0xc1, 0x12, 0xc2, 0x5b, 0x12, 0x25, 0x32, 0xdc, 0xe9,
	0x40, 0x32, 0x3e, 0x8b, 0x3b, 0x2b, 0xf8, 0x1b, 0x64, 0x89, 0x94, 0x8f, 0xc0, 0xc7, 0xc9, 0xc8,
	0x98, 0x31, 0x82, 0x25, 0x1f, 0x23, 0xf2, 0x9d, 0x7d, 0xa0, 0x24, 0x58, 0x24, 0x0b, 0xba, 0xf7,
	0x78, 0xde, 0xe7, 0xa7, 0xc7, 0x8f, 0x0e, 0x34, 0x7c, 0xc6, 0x30, 0x77, 0xf8, 0xca, 0x8e, 0x96,
	0x94, 0x53, 0x68, 0x32, 0x1a, 0x92, 0x6b, 0x1a, 0x12, 0x1e, 0xd9, 0xe2, 0x2f, 0xf9, 0xdb, 0x32,
	0x08, 0x25, 0x54, 0x48, 0x9c, 0xf4, 0x24, 0xd5, 0xdd, 0x73, 0xf0, 0xd9, 0x65, 0x64, 0x18, 0x27,
	0x83, 0x54, 0x04, 0x0d, 0x50, 0x99, 0xc4, 0x09, 0x5e, 0x36, 0xf5, 0x8e, 0xde, 0xaf, 0x8f, 0xe5,
	0x90, 0xde, 0x22, 0x1c, 0xd2, 0x45, 0xf3, 0x93, 0xbc, 0x15, 0x03, 0x34, 0x41, 0xd5, 0x5f, 0xd0,
	0x38, 0xe4, 0xcd, 0x52, 0x47, 0xef, 0x97, 0xc7, 0xd9, 0xf4, 0xaf, 0x76, 0xb3, 0x6e, 0x6b, 0x4f,
	0xeb, 0xb6, 0xd6, 0xfd, 0x0e, 0xbe, 0x1d, 0x98, 0x8f, 0x31, 0x8b, 0x68, 0xc8, 0x70, 0xf7, 0x12,
	0x7c, 0x71, 0x19, 0xf1, 0x70, 0x10, 0x48, 0xa8, 0x09, 0xaa, 0x0c, 0x07, 0x81, 0xa2, 0x66, 0xd3,
	0x87, 0xb1, 0x26, 0x30, 0x0e, 0xfd, 0x15, 0xd7, 0x15, 0x59, 0x3d, 0xcc, 0x47, 0xcb, 0xf9, 0x14,
	0x43, 0x08, 0xca, 0x3e, 0x42, 0x39, 0x54, 0x9c, 0x8f, 0x20, 0x0d, 0x50, 0x89, 0xd2, 0x95, 0x8c,
	0x28, 0x87, 0x2c, 0x5d, 0x6e, 0xa7, 0x28, 0x23, 0x91, 0x6e, 0x80, 0x90, 0x17, 0x47, 0x51, 0x90,
	0xbc, 0x03, 0x73, 0x24, 0x59, 0x96, 0x47, 0x39, 0xe6, 0xa4, 0x3f, 0xb7, 0x25, 0x50, 0x72, 0x19,
	0x81, 0x17, 0xa0, 0xa6, 0x0a, 0xec, 0xd9, 0x6f, 0xd7, 0x6f, 0x1f, 0x14, 0xd1, 0xfa, 0x79, 0x82,
	0x28, 0xa7, 0xc0, 0x2b, 0x50, 0xdf, 0x57, 0xf5, 0xa3, 0x60, 0x53, 0xa9, 0x5a, 0xbf, 0x4e, 0x51,
	0x29, 0x80, 0x0f, 0xbe, 0x7a, 0x98, 0x8b, 0x3b, 0x59, 0x4c, 0xaf, 0x70, 0x5d, 0x8a, 0x0a, 0x33,
	0xbc, 0xec, 0x04, 0x22, 0xd0, 0x18, 0x20, 0x24, 0x10, 0x59, 0x2b, 0x45, 0x41, 0xd4, 0x97, 0x2e,
	0x0c, 0xf2, 0xaa, 0x8f, 0xe1, 0xff, 0xfb, 0xad, 0xa5, 0x6f, 0xb6, 0x96, 0xfe, 0xb8, 0xb5, 0xf4,
	0xbb, 0x9d, 0xa5, 0x6d, 0x76, 0x96, 0xf6, 0xb0, 0xb3, 0xb4, 0x33, 0x87, 0xcc, 0xf9, 0x2c, 0x9e,
	0xd8, 0x53, 0xba, 0x70, 0xf6, 0x8e, 0x8e, 0xf0, 0xfa, 0x3d, 0x9d, 0xf9, 0xf3, 0xd0, 0x59, 0x39,
	0xd9, 0x3b, 0x4e, 0x22, 0xcc, 0x26, 0x55, 0xf1, 0x3a, 0xff, 0x3e, 0x07, 0x00, 0x00, 0xff, 0xff,
	0x07, 0x9b, 0xd1, 0xdb, 0xdd, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// BuyAsset defines a method for buying any asset using uusd
	BuyAsset(ctx context.Context, in *MsgBuyAsset, opts ...grpc.CallOption) (*MsgBuyAssetResponse, error)
	// SellAsset defines a method for selling any asset to uusd
	SellAsset(ctx context.Context, in *MsgSellAsset, opts ...grpc.CallOption) (*MsgSellAssetResponse, error)
	// SetAssetPrice defines a method for setting any asset price
	SetAssetPrice(ctx context.Context, in *MsgSetPrice, opts ...grpc.CallOption) (*MsgSetPriceResponse, error)
	// AddAssetSupply defines a method for adding any asset supply
	AddAssetSupply(ctx context.Context, in *MsgAddSupply, opts ...grpc.CallOption) (*MsgAddSupplyResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) BuyAsset(ctx context.Context, in *MsgBuyAsset, opts ...grpc.CallOption) (*MsgBuyAssetResponse, error) {
	out := new(MsgBuyAssetResponse)
	err := c.cc.Invoke(ctx, "/songwongtp.asset.asset.Msg/BuyAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SellAsset(ctx context.Context, in *MsgSellAsset, opts ...grpc.CallOption) (*MsgSellAssetResponse, error) {
	out := new(MsgSellAssetResponse)
	err := c.cc.Invoke(ctx, "/songwongtp.asset.asset.Msg/SellAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetAssetPrice(ctx context.Context, in *MsgSetPrice, opts ...grpc.CallOption) (*MsgSetPriceResponse, error) {
	out := new(MsgSetPriceResponse)
	err := c.cc.Invoke(ctx, "/songwongtp.asset.asset.Msg/SetAssetPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddAssetSupply(ctx context.Context, in *MsgAddSupply, opts ...grpc.CallOption) (*MsgAddSupplyResponse, error) {
	out := new(MsgAddSupplyResponse)
	err := c.cc.Invoke(ctx, "/songwongtp.asset.asset.Msg/AddAssetSupply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// BuyAsset defines a method for buying any asset using uusd
	BuyAsset(context.Context, *MsgBuyAsset) (*MsgBuyAssetResponse, error)
	// SellAsset defines a method for selling any asset to uusd
	SellAsset(context.Context, *MsgSellAsset) (*MsgSellAssetResponse, error)
	// SetAssetPrice defines a method for setting any asset price
	SetAssetPrice(context.Context, *MsgSetPrice) (*MsgSetPriceResponse, error)
	// AddAssetSupply defines a method for adding any asset supply
	AddAssetSupply(context.Context, *MsgAddSupply) (*MsgAddSupplyResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) BuyAsset(ctx context.Context, req *MsgBuyAsset) (*MsgBuyAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyAsset not implemented")
}
func (*UnimplementedMsgServer) SellAsset(ctx context.Context, req *MsgSellAsset) (*MsgSellAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SellAsset not implemented")
}
func (*UnimplementedMsgServer) SetAssetPrice(ctx context.Context, req *MsgSetPrice) (*MsgSetPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAssetPrice not implemented")
}
func (*UnimplementedMsgServer) AddAssetSupply(ctx context.Context, req *MsgAddSupply) (*MsgAddSupplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAssetSupply not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_BuyAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBuyAsset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BuyAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/songwongtp.asset.asset.Msg/BuyAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BuyAsset(ctx, req.(*MsgBuyAsset))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SellAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSellAsset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SellAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/songwongtp.asset.asset.Msg/SellAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SellAsset(ctx, req.(*MsgSellAsset))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetAssetPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetPrice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetAssetPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/songwongtp.asset.asset.Msg/SetAssetPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetAssetPrice(ctx, req.(*MsgSetPrice))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddAssetSupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddSupply)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddAssetSupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/songwongtp.asset.asset.Msg/AddAssetSupply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddAssetSupply(ctx, req.(*MsgAddSupply))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "songwongtp.asset.asset.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BuyAsset",
			Handler:    _Msg_BuyAsset_Handler,
		},
		{
			MethodName: "SellAsset",
			Handler:    _Msg_SellAsset_Handler,
		},
		{
			MethodName: "SetAssetPrice",
			Handler:    _Msg_SetAssetPrice_Handler,
		},
		{
			MethodName: "AddAssetSupply",
			Handler:    _Msg_AddAssetSupply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "asset/tx.proto",
}

func (m *MsgBuyAsset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBuyAsset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBuyAsset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Buyer) > 0 {
		i -= len(m.Buyer)
		copy(dAtA[i:], m.Buyer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Buyer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBuyAssetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBuyAssetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBuyAssetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSellAsset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSellAsset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSellAsset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Seller) > 0 {
		i -= len(m.Seller)
		copy(dAtA[i:], m.Seller)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Seller)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSellAssetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSellAssetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSellAssetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Price != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Price))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetPriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetPriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetPriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddSupply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddSupply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddSupply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddSupplyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddSupplyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddSupplyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgBuyAsset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Buyer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovTx(uint64(m.Amount))
	}
	return n
}

func (m *MsgBuyAssetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSellAsset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Seller)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovTx(uint64(m.Amount))
	}
	return n
}

func (m *MsgSellAssetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Price != 0 {
		n += 1 + sovTx(uint64(m.Price))
	}
	return n
}

func (m *MsgSetPriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddSupply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovTx(uint64(m.Amount))
	}
	return n
}

func (m *MsgAddSupplyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgBuyAsset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBuyAsset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBuyAsset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buyer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBuyAssetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBuyAssetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBuyAssetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSellAsset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSellAsset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSellAsset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSellAssetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSellAssetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSellAssetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetPrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetPriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetPriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetPriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddSupply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddSupply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddSupply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddSupplyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddSupplyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddSupplyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
